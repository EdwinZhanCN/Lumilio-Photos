import{_ as a,c as i,o as e,ae as n}from"./chunks/framework.Dh1jimFm.js";const o=JSON.parse('{"title":"前端技术栈","description":"","frontmatter":{},"headers":[],"relativePath":"zh-cn/tech-stack/frontend.md","filePath":"zh-cn/tech-stack/frontend.md","lastUpdated":1744433865000}'),t={name:"zh-cn/tech-stack/frontend.md"};function l(p,s,r,h,k,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="前端技术栈" tabindex="-1">前端技术栈 <a class="header-anchor" href="#前端技术栈" aria-label="Permalink to &quot;前端技术栈&quot;">​</a></h1><h2 id="react-js" tabindex="-1">React.js <a class="header-anchor" href="#react-js" aria-label="Permalink to &quot;React.js&quot;">​</a></h2><h3 id="redux" tabindex="-1">Redux <a class="header-anchor" href="#redux" aria-label="Permalink to &quot;Redux&quot;">​</a></h3><h2 id="vite" tabindex="-1">Vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;Vite&quot;">​</a></h2><h3 id="vitest" tabindex="-1">Vitest <a class="header-anchor" href="#vitest" aria-label="Permalink to &quot;Vitest&quot;">​</a></h3><h2 id="tailwindcss" tabindex="-1">TailwindCSS <a class="header-anchor" href="#tailwindcss" aria-label="Permalink to &quot;TailwindCSS&quot;">​</a></h2><h3 id="daisyui" tabindex="-1">DaisyUI <a class="header-anchor" href="#daisyui" aria-label="Permalink to &quot;DaisyUI&quot;">​</a></h3><h2 id="webassembly-wasm" tabindex="-1">WebAssembly (WASM) <a class="header-anchor" href="#webassembly-wasm" aria-label="Permalink to &quot;WebAssembly (WASM)&quot;">​</a></h2><p>WebAssembly（简称 Wasm）是一种基于堆栈的虚拟机的二进制指令格式。Wasm 被设计为一种便携的编译目标，适用于编程语言，从而支持在客户端和服务器端的 Web 应用程序中部署。</p><p>更多信息请参见：<a href="https://webassembly.org" target="_blank" rel="noreferrer">https://webassembly.org</a></p><p>本项目使用<code>wasm-pack</code> 将<strong>Rust</strong>项目打包成<code>.wasm</code>和<code>.js</code>文件供前端<strong>WebWorker</strong>调用。</p><h3 id="blake3-哈希" tabindex="-1">BLAKE3 哈希 <a class="header-anchor" href="#blake3-哈希" aria-label="Permalink to &quot;BLAKE3 哈希&quot;">​</a></h3><ul><li><strong>速度远快于</strong> MD5、SHA-1、SHA-2、SHA-3 和 BLAKE2。</li><li><strong>安全性高</strong>，不像 MD5 和 SHA-1。而且不像 SHA-2，BLAKE3 不易受到长度扩展攻击。</li><li><strong>高度并行化</strong>，可跨任意数量的线程和 SIMD 通道运行，因为其内部是一个 Merkle 树。</li><li>支持 <strong>验证流式处理</strong> 和 <strong>增量更新</strong>，这同样得益于其内部的 Merkle 树结构。</li><li>既是一个 <strong>PRF</strong>、<strong>MAC</strong>、<strong>KDF</strong> 和 <strong>XOF</strong>，也是一个常规哈希算法。</li><li><strong>单一算法，无需变体</strong>，在 x86-64 和小型架构上均表现优异。</li></ul><p>更多信息请参见：<a href="https://github.com/BLAKE3-team/BLAKE3" target="_blank" rel="noreferrer">https://github.com/BLAKE3-team/BLAKE3</a></p><p>本项目在前端（客户端浏览器）中使用WebAssembly调用BLAKE3对用户上传的媒体进行哈希。</p><p><strong>重要方法</strong></p><p><code>HashResult</code></p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="src/wasm/blake3_wasm.js">src/wasm/blake3_wasm.js</span></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HashResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 封装哈希结果的类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 获取哈希字符串 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hash_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 从字符串创建实例 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    free</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 释放 WASM 内存 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div><p><code>hash_asset</code></p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="src/wasm/blake3_wasm.js">src/wasm/blake3_wasm.js</span></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hash_asset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 将二进制缓冲区传入 WASM 生成 BLAKE3 哈希</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 返回 HashResult 对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div><p><code>compare_assets</code></p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="src/wasm/blake3_wasm.js">src/wasm/blake3_wasm.js</span></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compare_assets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buffer1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buffer2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 直接比较两个二进制缓冲区的哈希是否相同</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 返回布尔值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div><p><code>verify_asset_hash</code></p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="src/wasm/blake3_wasm.js">src/wasm/blake3_wasm.js</span></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> verify_asset_hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hash_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 验证二进制缓冲区与已有哈希字符串是否匹配</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 返回布尔值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div>`,24)]))}const b=a(t,[["render",l]]);export{o as __pageData,b as default};
