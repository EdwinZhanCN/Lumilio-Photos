import{_ as a,c as i,o as e,ae as n}from"./chunks/framework.Dh1jimFm.js";const k=JSON.parse('{"title":"Frontend Tech Stack","description":"","frontmatter":{},"headers":[],"relativePath":"tech-stack/frontend.md","filePath":"en/tech-stack/frontend.md","lastUpdated":1744518161000}'),t={name:"tech-stack/frontend.md"};function l(r,s,h,p,o,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="frontend-tech-stack" tabindex="-1">Frontend Tech Stack <a class="header-anchor" href="#frontend-tech-stack" aria-label="Permalink to &quot;Frontend Tech Stack&quot;">​</a></h1><h2 id="react-js" tabindex="-1">React.js <a class="header-anchor" href="#react-js" aria-label="Permalink to &quot;React.js&quot;">​</a></h2><h3 id="redux" tabindex="-1">Redux <a class="header-anchor" href="#redux" aria-label="Permalink to &quot;Redux&quot;">​</a></h3><h2 id="vite" tabindex="-1">Vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;Vite&quot;">​</a></h2><h3 id="vitest" tabindex="-1">Vitest <a class="header-anchor" href="#vitest" aria-label="Permalink to &quot;Vitest&quot;">​</a></h3><h2 id="tailwindcss" tabindex="-1">TailwindCSS <a class="header-anchor" href="#tailwindcss" aria-label="Permalink to &quot;TailwindCSS&quot;">​</a></h2><h3 id="daisyui" tabindex="-1">DaisyUI <a class="header-anchor" href="#daisyui" aria-label="Permalink to &quot;DaisyUI&quot;">​</a></h3><h2 id="webassembly-wasm" tabindex="-1">WebAssembly (WASM) <a class="header-anchor" href="#webassembly-wasm" aria-label="Permalink to &quot;WebAssembly (WASM)&quot;">​</a></h2><p>WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.</p><p>For more information, see <a href="https://webassembly.org" target="_blank" rel="noreferrer">https://webassembly.org</a></p><p>This project uses <code>wasm-pack</code> to package the <strong>Rust</strong> project into <code>.wasm</code> and <code>.js</code> files for the frontend <strong>WebWorker</strong> to call.</p><h3 id="blake3-hash" tabindex="-1">BLAKE3 Hash <a class="header-anchor" href="#blake3-hash" aria-label="Permalink to &quot;BLAKE3 Hash&quot;">​</a></h3><ul><li><strong>Much faster</strong> than MD5, SHA-1, SHA-2, SHA-3, and BLAKE2.</li><li><strong>Secure</strong>, unlike MD5 and SHA-1. And secure against length extension, unlike SHA-2.</li><li><strong>Highly parallelizable</strong> across any number of threads and SIMD lanes, because it&#39;s a Merkle tree on the inside.</li><li>Capable of <strong>verified streaming</strong> and <strong>incremental updates</strong>, again because it&#39;s a Merkle tree.</li><li>A <strong>PRF</strong>, <strong>MAC</strong>, <strong>KDF</strong>, and <strong>XOF</strong>, as well as a regular hash.</li><li><strong>One algorithm with no variants</strong>, which is fast on x86-64 and also on smaller architectures.</li></ul><p>For more information, see <a href="https://github.com/BLAKE3-team/BLAKE3" target="_blank" rel="noreferrer">https://github.com/BLAKE3-team/BLAKE3</a></p><p>This project uses WebAssembly to call BLAKE3 to hash media uploaded by users in the frontend (client browser).</p><h3 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-label="Permalink to &quot;Performance&quot;">​</a></h3><p>In our testing environment with mixed media file types (JPEG, RAW, and PXD - Pixelmator Pro files), the BLAKE3 WASM implementation achieved the following performance metrics:</p><ul><li><strong>Processing Speed</strong>: Even in very conservative setting, it reaches <strong>515 MB/s in 173 files (2.94 GB total)</strong></li><li><strong>Memory Usage</strong>: The memory usage is <strong>~28.9MB</strong> for the entire process.</li><li><strong>Setting</strong>:</li></ul><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="src/worker/hash.worker.js">src/worker/hash.worker.js</span></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CONCURRENCY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> assets[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000_000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4 threds</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div><ul><li><strong>Environment</strong>: MacOS 15.4 M2 Pro (4E6P) Client Browser <em>(Chrome Version 135.0.7049.43 (Official Build) (arm64))</em></li><li><strong>Test Files</strong>: Mix of different image formats <ul><li>JPEG photographs <strong>(5-15 MB each)</strong></li><li>RAW camera files <strong>(20-50 MB each)</strong></li><li>PXD (Pixelmator Pro) files <strong>(30-50 MB each)</strong></li></ul></li><li><strong>Resource</strong>: <a href="/assets/ChromeVercelApr13.json">json trace file</a> from Chrome DevTools</li></ul><p>This performance demonstrates efficient client-side hashing capabilities, enabling quick duplicate detection and file verification without server-side processing.</p><p><strong>Important Functions</strong></p><p><code>HashResult</code></p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="src/wasm/blake3_wasm.js">src/wasm/blake3_wasm.js</span></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HashResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Encapsulates the hash result</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The hash is a 256-bit BLAKE3 hash, represented as a hex string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Get the hash string */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hash_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Create an instance from a string */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    free</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Free WASM memory */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div><p><code>hash_asset</code></p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="src/wasm/blake3_wasm.js">src/wasm/blake3_wasm.js</span></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hash_asset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Generates a BLAKE3 hash from any media asset buffer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Return HashResult Object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><p><code>compare_assets</code></p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="src/wasm/blake3_wasm.js">src/wasm/blake3_wasm.js</span></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compare_assets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buffer1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buffer2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Directly compares the hashes of two binary buffers</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Returns a boolean value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><p><code>verify_asset_hash</code></p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="src/wasm/blake3_wasm.js">src/wasm/blake3_wasm.js</span></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> verify_asset_hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hash_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Verifies if the binary buffer matches an existing hash string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Returns a boolean value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div>`,30)]))}const g=a(t,[["render",l]]);export{k as __pageData,g as default};
