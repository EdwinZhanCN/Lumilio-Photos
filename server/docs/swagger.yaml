basePath: /api/v1
definitions:
  api.Result:
    description: Standard API response wrapper
    properties:
      code:
        description: Business status code (0 for success, non-zero for errors)
        example: 0
        type: integer
      data:
        description: Business data, ignore empty values
        type: object
      error:
        description: Debug error message, ignore empty values
        example: error details
        type: string
      message:
        description: User readable message
        example: success
        type: string
    type: object
  dbtypes.AssetType:
    enum:
    - PHOTO
    - VIDEO
    - AUDIO
    type: string
    x-enum-varnames:
    - AssetTypePhoto
    - AssetTypeVideo
    - AssetTypeAudio
  handler.AddAssetToAlbumRequest:
    properties:
      position:
        type: integer
    type: object
  handler.AssetDTO:
    properties:
      asset_id:
        type: string
      deleted_at:
        type: string
      duration:
        type: number
      file_size:
        type: integer
      hash:
        type: string
      height:
        type: integer
      is_deleted:
        type: boolean
      mime_type:
        type: string
      original_filename:
        type: string
      owner_id:
        type: integer
      specific_metadata:
        type: object
      storage_path:
        type: string
      type:
        type: string
      upload_time:
        type: string
      width:
        type: integer
    type: object
  handler.AssetFilter:
    properties:
      camera_make:
        example: Canon
        type: string
      date:
        $ref: '#/definitions/handler.DateRange'
      filename:
        $ref: '#/definitions/handler.FilenameFilter'
      lens:
        example: EF 50mm f/1.8
        type: string
      liked:
        example: true
        type: boolean
      owner_id:
        example: 123
        type: integer
      rating:
        example: 5
        maximum: 5
        minimum: 0
        type: integer
      raw:
        example: true
        type: boolean
      type:
        enum:
        - PHOTO
        - VIDEO
        - AUDIO
        example: PHOTO
        type: string
    type: object
  handler.AssetListResponse:
    properties:
      assets:
        items:
          $ref: '#/definitions/handler.AssetDTO'
        type: array
      limit:
        example: 20
        type: integer
      offset:
        example: 0
        type: integer
    type: object
  handler.AssetTypesResponse:
    properties:
      types:
        items:
          $ref: '#/definitions/dbtypes.AssetType'
        type: array
    type: object
  handler.BatchUploadResponse:
    properties:
      results:
        items:
          $ref: '#/definitions/handler.BatchUploadResult'
        type: array
    type: object
  handler.BatchUploadResult:
    properties:
      content_hash:
        description: MLService-provided content hash
        type: string
      error:
        description: Only present for failed uploads
        type: string
      file_name:
        description: Original filename
        type: string
      message:
        description: Status message
        type: string
      size:
        description: Only present for successful uploads
        type: integer
      status:
        description: Only present for successful uploads
        type: string
      success:
        description: Whether the file was successfully queued
        type: boolean
      task_id:
        description: Only present for successful uploads
        type: integer
    type: object
  handler.CreateAlbumRequest:
    properties:
      album_name:
        type: string
      cover_asset_id:
        type: string
      description:
        type: string
    required:
    - album_name
    - cover_asset_id
    type: object
  handler.DateRange:
    properties:
      from:
        type: string
      to:
        type: string
    type: object
  handler.FilenameFilter:
    properties:
      mode:
        enum:
        - contains
        - matches
        - startswith
        - endswith
        example: startswith
        type: string
      value:
        example: IMG_
        type: string
    type: object
  handler.FilterAssetsRequest:
    properties:
      filter:
        $ref: '#/definitions/handler.AssetFilter'
      limit:
        example: 20
        maximum: 100
        minimum: 1
        type: integer
      offset:
        example: 0
        minimum: 0
        type: integer
    type: object
  handler.GetAlbumResponse:
    properties:
      album_id:
        type: integer
      album_name:
        type: string
      asset_count:
        type: integer
      cover_asset_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  handler.ListAlbumsResponse:
    properties:
      albums:
        items:
          $ref: '#/definitions/handler.GetAlbumResponse'
        type: array
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  handler.MessageResponse:
    properties:
      message:
        example: Operation completed successfully
        type: string
    type: object
  handler.OptionsResponse:
    properties:
      camera_makes:
        items:
          type: string
        type: array
      lenses:
        items:
          type: string
        type: array
    type: object
  handler.SearchAssetsRequest:
    properties:
      filter:
        $ref: '#/definitions/handler.AssetFilter'
      limit:
        example: 20
        maximum: 100
        minimum: 1
        type: integer
      offset:
        example: 0
        minimum: 0
        type: integer
      query:
        example: red bird on branch
        type: string
      search_type:
        enum:
        - filename
        - semantic
        example: filename
        type: string
    required:
    - query
    - search_type
    type: object
  handler.UpdateAlbumRequest:
    properties:
      album_name:
        type: string
      cover_asset_id:
        type: string
      description:
        type: string
    type: object
  handler.UpdateAssetPositionRequest:
    properties:
      position:
        type: integer
    required:
    - position
    type: object
  handler.UpdateAssetRequest:
    properties:
      specific_metadata:
        type: object
    type: object
  handler.UpdateDescriptionRequest:
    properties:
      description:
        example: A beautiful sunset photo
        type: string
    type: object
  handler.UpdateLikeRequest:
    properties:
      liked:
        example: true
        type: boolean
    type: object
  handler.UpdateRatingAndLikeRequest:
    properties:
      liked:
        example: true
        type: boolean
      rating:
        example: 5
        maximum: 5
        minimum: 0
        type: integer
    type: object
  handler.UpdateRatingRequest:
    properties:
      rating:
        example: 5
        maximum: 5
        minimum: 0
        type: integer
    type: object
  handler.UploadResponse:
    properties:
      content_hash:
        example: abcd1234567890
        type: string
      file_name:
        example: photo.jpg
        type: string
      message:
        example: File received and queued for processing
        type: string
      size:
        example: 1048576
        type: integer
      status:
        example: processing
        type: string
      task_id:
        example: 12345
        type: integer
    type: object
  service.AuthResponse:
    properties:
      expiresAt:
        type: string
      refreshToken:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/service.UserResponse'
    type: object
  service.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  service.RefreshTokenRequest:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  service.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  service.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      is_active:
        type: boolean
      last_login:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
host: localhost:3001
info:
  contact:
    name: API Support
    url: http://www.github.com/EdwinZhanCN/Lumilio-Photos
  description: Photo management system API with asset upload, processing, and organization
    features
  license:
    name: GPLv3.0
    url: https://opensource.org/licenses/GPL-3.0
  title: Lumilio-Photos Manager API
  version: "1.0"
paths:
  /albums:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of albums for the authenticated user
      parameters:
      - default: 20
        description: Maximum number of results (max 100)
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of results to skip for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.ListAlbumsResponse'
              type: object
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/api.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Failed to retrieve albums
          schema:
            $ref: '#/definitions/api.Result'
      security:
      - BearerAuth: []
      summary: List albums
      tags:
      - albums
    post:
      consumes:
      - application/json
      description: Create a new album for the authenticated user
      parameters:
      - description: Album creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.CreateAlbumRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Album created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.GetAlbumResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/api.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Failed to create album
          schema:
            $ref: '#/definitions/api.Result'
      security:
      - BearerAuth: []
      summary: Create a new album
      tags:
      - albums
  /albums/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an album by its ID
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Album deleted successfully
          schema:
            $ref: '#/definitions/api.Result'
        "400":
          description: Invalid album ID
          schema:
            $ref: '#/definitions/api.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Result'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.Result'
        "404":
          description: Album not found
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Failed to delete album
          schema:
            $ref: '#/definitions/api.Result'
      security:
      - BearerAuth: []
      summary: Delete album
      tags:
      - albums
    get:
      consumes:
      - application/json
      description: Retrieve a specific album by its ID
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Album retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.GetAlbumResponse'
              type: object
        "400":
          description: Invalid album ID
          schema:
            $ref: '#/definitions/api.Result'
        "404":
          description: Album not found
          schema:
            $ref: '#/definitions/api.Result'
      security:
      - BearerAuth: []
      summary: Get album by ID
      tags:
      - albums
    put:
      consumes:
      - application/json
      description: Update an existing album's information
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      - description: Album update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateAlbumRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Album updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.GetAlbumResponse'
              type: object
        "400":
          description: Invalid album ID or request data
          schema:
            $ref: '#/definitions/api.Result'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Result'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.Result'
        "404":
          description: Album not found
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Failed to update album
          schema:
            $ref: '#/definitions/api.Result'
      security:
      - BearerAuth: []
      summary: Update album
      tags:
      - albums
  /albums/{id}/assets:
    get:
      consumes:
      - application/json
      description: Retrieve all assets in a specific album
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Assets retrieved successfully
          schema:
            $ref: '#/definitions/api.Result'
        "400":
          description: Invalid album ID
          schema:
            $ref: '#/definitions/api.Result'
        "404":
          description: Album not found
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Failed to retrieve album assets
          schema:
            $ref: '#/definitions/api.Result'
      security:
      - BearerAuth: []
      summary: Get assets in album
      tags:
      - albums
  /albums/{id}/assets/{assetId}:
    delete:
      consumes:
      - application/json
      description: Remove an asset from a specific album
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      - description: Asset ID (UUID format)
        in: path
        name: assetId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Asset removed from album successfully
          schema:
            $ref: '#/definitions/api.Result'
        "400":
          description: Invalid album ID or asset ID
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Failed to remove asset from album
          schema:
            $ref: '#/definitions/api.Result'
      security:
      - BearerAuth: []
      summary: Remove asset from album
      tags:
      - albums
    post:
      consumes:
      - application/json
      description: Add an asset to a specific album
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      - description: Asset ID (UUID format)
        in: path
        name: assetId
        required: true
        type: string
      - description: Asset position in album
        in: body
        name: request
        schema:
          $ref: '#/definitions/handler.AddAssetToAlbumRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Asset added to album successfully
          schema:
            $ref: '#/definitions/api.Result'
        "400":
          description: Invalid album ID or asset ID
          schema:
            $ref: '#/definitions/api.Result'
        "404":
          description: Album not found
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Failed to add asset to album
          schema:
            $ref: '#/definitions/api.Result'
      security:
      - BearerAuth: []
      summary: Add asset to album
      tags:
      - albums
  /albums/{id}/assets/{assetId}/position:
    put:
      consumes:
      - application/json
      description: Update the position of an asset within a specific album
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      - description: Asset ID (UUID format)
        in: path
        name: assetId
        required: true
        type: string
      - description: New position for the asset
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateAssetPositionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Asset position updated successfully
          schema:
            $ref: '#/definitions/api.Result'
        "400":
          description: Invalid album ID or asset ID
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Failed to update asset position
          schema:
            $ref: '#/definitions/api.Result'
      security:
      - BearerAuth: []
      summary: Update asset position in album
      tags:
      - albums
  /assets:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of assets. Filter by type, owner, or
        search query. Use 'vector=true|false' to control semantic vector search when
        'q' is provided (feature must be enabled). At least one filter parameter is
        required.
      parameters:
      - description: Asset type filter
        enum:
        - PHOTO
        - VIDEO
        - AUDIO
        - DOCUMENT
        example: '"PHOTO"'
        in: query
        name: type
        type: string
      - description: Filter by owner ID
        example: 123
        in: query
        name: owner_id
        type: integer
      - description: Search query (semantic vector search when enabled) and filename
          match
        example: '"red bird on a branch"'
        in: query
        name: q
        type: string
      - default: false
        description: 'When q is set: true to use semantic vector search, false to
          use filename search'
        in: query
        name: vector
        type: boolean
      - default: 20
        description: Maximum number of results (max 100)
        example: 20
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of results to skip for pagination
        example: 0
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Assets retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.AssetListResponse'
              type: object
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: List assets
      tags:
      - assets
    post:
      consumes:
      - multipart/form-data
      description: Upload a single photo, video, audio file, or document to the system.
        The file is staged and queued for processing.
      parameters:
      - description: Asset file to upload
        in: formData
        name: file
        required: true
        type: file
      - description: MLService-calculated BLAKE3 hash of the file
        in: header
        name: X-Content-Hash
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Upload successful
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.UploadResponse'
              type: object
        "400":
          description: Bad request - no file provided or parse error
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Upload a single asset
      tags:
      - assets
  /assets/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete an asset by marking it as deleted. The physical file
        is not removed.
      parameters:
      - description: Asset ID (UUID format)
        example: '"550e8400-e29b-41d4-a716-446655440000"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Asset deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.MessageResponse'
              type: object
        "400":
          description: Invalid asset ID format
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Delete asset
      tags:
      - assets
    get:
      consumes:
      - application/json
      description: Retrieve detailed information about a specific asset. Optionally
        include thumbnails, tags, and albums.
      parameters:
      - description: Asset ID (UUID format)
        example: '"550e8400-e29b-41d4-a716-446655440000"'
        in: path
        name: id
        required: true
        type: string
      - default: true
        description: Include thumbnails
        in: query
        name: include_thumbnails
        type: boolean
      - default: true
        description: Include tags
        in: query
        name: include_tags
        type: boolean
      - default: true
        description: Include albums
        in: query
        name: include_albums
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Asset details with optional relationships
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.AssetDTO'
              type: object
        "400":
          description: Invalid asset ID
          schema:
            $ref: '#/definitions/api.Result'
        "404":
          description: Asset not found
          schema:
            $ref: '#/definitions/api.Result'
      summary: Get asset by ID
      tags:
      - assets
    put:
      consumes:
      - application/json
      description: Update the specific metadata of an asset (e.g., photo EXIF data,
        video metadata).
      parameters:
      - description: Asset ID (UUID format)
        example: '"550e8400-e29b-41d4-a716-446655440000"'
        in: path
        name: id
        required: true
        type: string
      - description: Updated metadata
        in: body
        name: metadata
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateAssetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Asset updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.MessageResponse'
              type: object
        "400":
          description: Invalid asset ID or request body
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Update asset metadata
      tags:
      - assets
  /assets/{id}/albums:
    get:
      consumes:
      - application/json
      description: Retrieve all albums that contain a specific asset
      parameters:
      - description: Asset ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Albums retrieved successfully
          schema:
            $ref: '#/definitions/api.Result'
        "400":
          description: Invalid asset ID
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Failed to retrieve asset albums
          schema:
            $ref: '#/definitions/api.Result'
      security:
      - BearerAuth: []
      summary: Get albums containing asset
      tags:
      - albums
  /assets/{id}/albums/{albumId}:
    post:
      consumes:
      - application/json
      description: Associate an asset with a specific album by asset ID and album
        ID.
      parameters:
      - description: Asset ID (UUID format)
        example: '"550e8400-e29b-41d4-a716-446655440000"'
        in: path
        name: id
        required: true
        type: string
      - description: Album ID
        example: 123
        in: path
        name: albumId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Asset added to album successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.MessageResponse'
              type: object
        "400":
          description: Invalid asset ID or album ID
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Add asset to album
      tags:
      - assets
  /assets/{id}/description:
    put:
      consumes:
      - application/json
      description: Update the description/comment of a specific asset
      parameters:
      - description: Asset ID
        in: path
        name: id
        required: true
        type: string
      - description: Description data
        in: body
        name: description
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateDescriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Description updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.MessageResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/api.Result'
        "404":
          description: Asset not found
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Update asset description
      tags:
      - assets
  /assets/{id}/like:
    put:
      consumes:
      - application/json
      description: Update the like/favorite status of a specific asset
      parameters:
      - description: Asset ID
        in: path
        name: id
        required: true
        type: string
      - description: Like data
        in: body
        name: like
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateLikeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Like status updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.MessageResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/api.Result'
        "404":
          description: Asset not found
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Update asset like status
      tags:
      - assets
  /assets/{id}/original:
    get:
      description: Serve the original file content for an asset by asset ID. Returns
        the file as an octet-stream.
      parameters:
      - description: Asset ID (UUID format)
        example: '"550e8400-e29b-41d4-a716-446655440000"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: Original file content
          schema:
            type: file
        "400":
          description: Invalid asset ID
          schema:
            $ref: '#/definitions/api.Result'
        "404":
          description: Asset not found
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Get original file
      tags:
      - assets
  /assets/{id}/rating:
    put:
      consumes:
      - application/json
      description: Update the rating (0-5) of a specific asset
      parameters:
      - description: Asset ID
        in: path
        name: id
        required: true
        type: string
      - description: Rating data
        in: body
        name: rating
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateRatingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Rating updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.MessageResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/api.Result'
        "404":
          description: Asset not found
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Update asset rating
      tags:
      - assets
  /assets/{id}/rating-and-like:
    put:
      consumes:
      - application/json
      description: Update both the rating (0-5) and like/favorite status of a specific
        asset
      parameters:
      - description: Asset ID
        in: path
        name: id
        required: true
        type: string
      - description: Rating and like data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateRatingAndLikeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Rating and like status updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.MessageResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/api.Result'
        "404":
          description: Asset not found
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Update asset rating and like status
      tags:
      - assets
  /assets/{id}/thumbnail:
    get:
      description: Retrieve a specific thumbnail image for an asset by asset ID and
        size parameter. Returns the image file directly.
      parameters:
      - description: Asset ID (UUID format)
        example: '"550e8400-e29b-41d4-a716-446655440000"'
        in: path
        name: id
        required: true
        type: string
      - default: medium
        description: Thumbnail size
        enum:
        - small
        - medium
        - large
        in: query
        name: size
        type: string
      produces:
      - image/jpeg
      responses:
        "200":
          description: Thumbnail image file
          schema:
            type: file
        "400":
          description: Invalid asset ID or size parameter
          schema:
            $ref: '#/definitions/api.Result'
        "404":
          description: Asset or thumbnail not found
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Get asset thumbnail
      tags:
      - assets
  /assets/batch:
    post:
      consumes:
      - multipart/form-data
      description: Batch upload multiple assets using a multipart/form-data request.
        Each file part's field name must be its BLAKE3 content hash. All files are
        staged and queued for processing.
      produces:
      - application/json
      responses:
        "200":
          description: Batch upload completed
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.BatchUploadResponse'
              type: object
        "400":
          description: Bad request - no files provided or parse error
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Batch upload assets
      tags:
      - assets
  /assets/filter:
    post:
      consumes:
      - application/json
      description: Filter assets using comprehensive filtering options including RAW,
        rating, liked status, filename patterns, date ranges, camera make, and lens
      parameters:
      - description: Filter criteria
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.FilterAssetsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Assets filtered successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.AssetListResponse'
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Filter assets
      tags:
      - assets
  /assets/filter-options:
    get:
      consumes:
      - application/json
      description: Get available camera makes and lenses for filter dropdowns
      produces:
      - application/json
      responses:
        "200":
          description: Filter options retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.OptionsResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Get filter options
      tags:
      - assets
  /assets/liked:
    get:
      consumes:
      - application/json
      description: Get all assets that have been liked/favorited
      parameters:
      - default: 20
        description: Number of assets to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of assets to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Liked assets retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.AssetListResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Get liked assets
      tags:
      - assets
  /assets/rating/{rating}:
    get:
      consumes:
      - application/json
      description: Get assets with a specific rating (0-5)
      parameters:
      - description: Rating (0-5)
        in: path
        name: rating
        required: true
        type: integer
      - default: 20
        description: Number of assets to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of assets to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Assets retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.AssetListResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Get assets by rating
      tags:
      - assets
  /assets/search:
    post:
      consumes:
      - application/json
      description: Search assets using either filename matching or semantic vector
        search. Can be combined with comprehensive filters.
      parameters:
      - description: Search criteria
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.SearchAssetsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Assets found successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.AssetListResponse'
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Search assets
      tags:
      - assets
  /assets/types:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all supported asset types in the system.
      produces:
      - application/json
      responses:
        "200":
          description: Asset types retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/handler.AssetTypesResponse'
              type: object
      summary: Get supported asset types
      tags:
      - assets
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/service.AuthResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/api.Result'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Revoke the user's refresh token
      parameters:
      - description: Refresh token to revoke
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/api.Result'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/api.Result'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Logout user
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get information about the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User information retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/service.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate a new access token using a valid refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/service.AuthResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/api.Result'
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with username, email, and password
      parameters:
      - description: Registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Result'
            - properties:
                data:
                  $ref: '#/definitions/service.AuthResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/api.Result'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/api.Result'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Result'
      summary: Register a new user
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
