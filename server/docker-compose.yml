version: '3.8'

services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=photolibrary
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=photolibrary
      - PORT=8080
      - STORAGE_PATH=/app/data/photos
      - STAGING_PATH=/app/staging
      - QUEUE_DIR=/app/queue
    volumes:
      - photo_storage:/app/data/photos
      - staging_area:/app/staging
      - task_queue:/app/queue

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=photolibrary
      - STORAGE_PATH=/app/data/photos
      - STAGING_PATH=/app/staging
      - QUEUE_DIR=/app/queue
    volumes:
      - photo_storage:/app/data/photos
      - staging_area:/app/staging
      - task_queue:/app/queue

  # Uncomment to enable AI service in the future
  # ai:
  #   build:
  #     context: ./ai
  #     dockerfile: Dockerfile
  #   environment:
  #     - MODEL_PATH=/app/models
  #   volumes:
  #     - ai_models:/app/models
  #   ports:
  #     - "8081:8081"

volumes:
  postgres_data:
  photo_storage:
  staging_area:
  task_queue:
  # ai_models: