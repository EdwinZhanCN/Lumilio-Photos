// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: ml_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Inference_Infer_FullMethodName              = "/home_native.v1.Inference/Infer"
	Inference_GetCapabilities_FullMethodName    = "/home_native.v1.Inference/GetCapabilities"
	Inference_StreamCapabilities_FullMethodName = "/home_native.v1.Inference/StreamCapabilities"
	Inference_Health_FullMethodName             = "/home_native.v1.Inference/Health"
)

// InferenceClient is the client API for Inference service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ---- 服务契约 ----
type InferenceClient interface {
	// 双向流：客户端推片段，服务端回增量/最终结果；顺序保证但互不阻塞
	Infer(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InferRequest, InferResponse], error)
	// 能力宣告（向后兼容：返回单条能力；多能力请使用 StreamCapabilities）
	GetCapabilities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Capability, error)
	// 推荐：服务器流返回全部能力（启动/热更后调用）
	StreamCapabilities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Capability], error)
	// 健康探针
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type inferenceClient struct {
	cc grpc.ClientConnInterface
}

func NewInferenceClient(cc grpc.ClientConnInterface) InferenceClient {
	return &inferenceClient{cc}
}

func (c *inferenceClient) Infer(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InferRequest, InferResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Inference_ServiceDesc.Streams[0], Inference_Infer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InferRequest, InferResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Inference_InferClient = grpc.BidiStreamingClient[InferRequest, InferResponse]

func (c *inferenceClient) GetCapabilities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Capability, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Capability)
	err := c.cc.Invoke(ctx, Inference_GetCapabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inferenceClient) StreamCapabilities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Capability], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Inference_ServiceDesc.Streams[1], Inference_StreamCapabilities_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, Capability]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Inference_StreamCapabilitiesClient = grpc.ServerStreamingClient[Capability]

func (c *inferenceClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Inference_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InferenceServer is the server API for Inference service.
// All implementations must embed UnimplementedInferenceServer
// for forward compatibility.
//
// ---- 服务契约 ----
type InferenceServer interface {
	// 双向流：客户端推片段，服务端回增量/最终结果；顺序保证但互不阻塞
	Infer(grpc.BidiStreamingServer[InferRequest, InferResponse]) error
	// 能力宣告（向后兼容：返回单条能力；多能力请使用 StreamCapabilities）
	GetCapabilities(context.Context, *emptypb.Empty) (*Capability, error)
	// 推荐：服务器流返回全部能力（启动/热更后调用）
	StreamCapabilities(*emptypb.Empty, grpc.ServerStreamingServer[Capability]) error
	// 健康探针
	Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedInferenceServer()
}

// UnimplementedInferenceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInferenceServer struct{}

func (UnimplementedInferenceServer) Infer(grpc.BidiStreamingServer[InferRequest, InferResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Infer not implemented")
}
func (UnimplementedInferenceServer) GetCapabilities(context.Context, *emptypb.Empty) (*Capability, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapabilities not implemented")
}
func (UnimplementedInferenceServer) StreamCapabilities(*emptypb.Empty, grpc.ServerStreamingServer[Capability]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCapabilities not implemented")
}
func (UnimplementedInferenceServer) Health(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedInferenceServer) mustEmbedUnimplementedInferenceServer() {}
func (UnimplementedInferenceServer) testEmbeddedByValue()                   {}

// UnsafeInferenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InferenceServer will
// result in compilation errors.
type UnsafeInferenceServer interface {
	mustEmbedUnimplementedInferenceServer()
}

func RegisterInferenceServer(s grpc.ServiceRegistrar, srv InferenceServer) {
	// If the following call pancis, it indicates UnimplementedInferenceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Inference_ServiceDesc, srv)
}

func _Inference_Infer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InferenceServer).Infer(&grpc.GenericServerStream[InferRequest, InferResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Inference_InferServer = grpc.BidiStreamingServer[InferRequest, InferResponse]

func _Inference_GetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InferenceServer).GetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inference_GetCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InferenceServer).GetCapabilities(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inference_StreamCapabilities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InferenceServer).StreamCapabilities(m, &grpc.GenericServerStream[emptypb.Empty, Capability]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Inference_StreamCapabilitiesServer = grpc.ServerStreamingServer[Capability]

func _Inference_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InferenceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inference_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InferenceServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Inference_ServiceDesc is the grpc.ServiceDesc for Inference service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Inference_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "home_native.v1.Inference",
	HandlerType: (*InferenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCapabilities",
			Handler:    _Inference_GetCapabilities_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Inference_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Infer",
			Handler:       _Inference_Infer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamCapabilities",
			Handler:       _Inference_StreamCapabilities_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ml_service.proto",
}
