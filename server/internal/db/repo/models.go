// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repo

import (
	"github.com/jackc/pgx/v5/pgtype"
	pgvector_go "github.com/pgvector/pgvector-go"
	"server/internal/db/dbtypes"
	"server/internal/storage/repocfg"
)

type Album struct {
	AlbumID      int32              `db:"album_id" json:"album_id"`
	UserID       int32              `db:"user_id" json:"user_id"`
	AlbumName    string             `db:"album_name" json:"album_name"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	Description  *string            `db:"description" json:"description"`
	CoverAssetID pgtype.UUID        `db:"cover_asset_id" json:"cover_asset_id"`
}

type AlbumAsset struct {
	AlbumID   int32              `db:"album_id" json:"album_id"`
	AssetID   pgtype.UUID        `db:"asset_id" json:"asset_id"`
	Position  *int32             `db:"position" json:"position"`
	AddedTime pgtype.Timestamptz `db:"added_time" json:"added_time"`
}

type Asset struct {
	AssetID          pgtype.UUID              `db:"asset_id" json:"asset_id"`
	OwnerID          *int32                   `db:"owner_id" json:"owner_id"`
	Type             string                   `db:"type" json:"type"`
	OriginalFilename string                   `db:"original_filename" json:"original_filename"`
	StoragePath      *string                  `db:"storage_path" json:"storage_path"`
	MimeType         string                   `db:"mime_type" json:"mime_type"`
	FileSize         int64                    `db:"file_size" json:"file_size"`
	Hash             *string                  `db:"hash" json:"hash"`
	Width            *int32                   `db:"width" json:"width"`
	Height           *int32                   `db:"height" json:"height"`
	Duration         *float64                 `db:"duration" json:"duration"`
	UploadTime       pgtype.Timestamptz       `db:"upload_time" json:"upload_time"`
	TakenTime        pgtype.Timestamptz       `db:"taken_time" json:"taken_time"`
	IsDeleted        *bool                    `db:"is_deleted" json:"is_deleted"`
	DeletedAt        pgtype.Timestamptz       `db:"deleted_at" json:"deleted_at"`
	SpecificMetadata dbtypes.SpecificMetadata `db:"specific_metadata" json:"specific_metadata"`
	Rating           *int32                   `db:"rating" json:"rating"`
	Liked            *bool                    `db:"liked" json:"liked"`
	RepositoryID     pgtype.UUID              `db:"repository_id" json:"repository_id"`
	Embedding        *pgvector_go.Vector      `db:"embedding" json:"embedding"`
	Status           []byte                   `db:"status" json:"status"`
}

type AssetTag struct {
	AssetID    pgtype.UUID    `db:"asset_id" json:"asset_id"`
	TagID      int32          `db:"tag_id" json:"tag_id"`
	Confidence pgtype.Numeric `db:"confidence" json:"confidence"`
	Source     string         `db:"source" json:"source"`
}

type FileRecord struct {
	ID             int64              `db:"id" json:"id"`
	RepositoryID   pgtype.UUID        `db:"repository_id" json:"repository_id"`
	FilePath       string             `db:"file_path" json:"file_path"`
	FileSize       int64              `db:"file_size" json:"file_size"`
	ModTime        pgtype.Timestamptz `db:"mod_time" json:"mod_time"`
	ContentHash    *string            `db:"content_hash" json:"content_hash"`
	LastScanned    pgtype.Timestamptz `db:"last_scanned" json:"last_scanned"`
	ScanGeneration *int64             `db:"scan_generation" json:"scan_generation"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type RefreshToken struct {
	TokenID   int32              `db:"token_id" json:"token_id"`
	UserID    int32              `db:"user_id" json:"user_id"`
	Token     string             `db:"token" json:"token"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	IsRevoked *bool              `db:"is_revoked" json:"is_revoked"`
}

type Repository struct {
	RepoID    pgtype.UUID              `db:"repo_id" json:"repo_id"`
	Name      string                   `db:"name" json:"name"`
	Path      string                   `db:"path" json:"path"`
	Config    repocfg.RepositoryConfig `db:"config" json:"config"`
	Status    dbtypes.RepoStatus       `db:"status" json:"status"`
	LastSync  pgtype.Timestamptz       `db:"last_sync" json:"last_sync"`
	CreatedAt pgtype.Timestamptz       `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz       `db:"updated_at" json:"updated_at"`
}

type SpeciesPrediction struct {
	AssetID pgtype.UUID `db:"asset_id" json:"asset_id"`
	Label   string      `db:"label" json:"label"`
	Score   float32     `db:"score" json:"score"`
}

type SyncOperation struct {
	ID            int64              `db:"id" json:"id"`
	RepositoryID  pgtype.UUID        `db:"repository_id" json:"repository_id"`
	OperationType string             `db:"operation_type" json:"operation_type"`
	FilesScanned  *int32             `db:"files_scanned" json:"files_scanned"`
	FilesAdded    *int32             `db:"files_added" json:"files_added"`
	FilesUpdated  *int32             `db:"files_updated" json:"files_updated"`
	FilesRemoved  *int32             `db:"files_removed" json:"files_removed"`
	StartTime     pgtype.Timestamptz `db:"start_time" json:"start_time"`
	EndTime       pgtype.Timestamptz `db:"end_time" json:"end_time"`
	DurationMs    *int64             `db:"duration_ms" json:"duration_ms"`
	Status        *string            `db:"status" json:"status"`
	ErrorMessage  *string            `db:"error_message" json:"error_message"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type Tag struct {
	TagID         int32   `db:"tag_id" json:"tag_id"`
	TagName       string  `db:"tag_name" json:"tag_name"`
	Category      *string `db:"category" json:"category"`
	IsAiGenerated *bool   `db:"is_ai_generated" json:"is_ai_generated"`
}

type Thumbnail struct {
	ThumbnailID int32              `db:"thumbnail_id" json:"thumbnail_id"`
	AssetID     pgtype.UUID        `db:"asset_id" json:"asset_id"`
	Size        string             `db:"size" json:"size"`
	StoragePath string             `db:"storage_path" json:"storage_path"`
	MimeType    string             `db:"mime_type" json:"mime_type"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type User struct {
	UserID    int32              `db:"user_id" json:"user_id"`
	Username  string             `db:"username" json:"username"`
	Email     string             `db:"email" json:"email"`
	Password  string             `db:"password" json:"password"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	IsActive  *bool              `db:"is_active" json:"is_active"`
	LastLogin pgtype.Timestamptz `db:"last_login" json:"last_login"`
}
