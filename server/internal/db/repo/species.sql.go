// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: species.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSpeciesPrediction = `-- name: CreateSpeciesPrediction :one
INSERT INTO species_predictions (asset_id, label, score)
VALUES ($1, $2, $3)
RETURNING asset_id, label, score
`

type CreateSpeciesPredictionParams struct {
	AssetID pgtype.UUID `db:"asset_id" json:"asset_id"`
	Label   string      `db:"label" json:"label"`
	Score   float32     `db:"score" json:"score"`
}

func (q *Queries) CreateSpeciesPrediction(ctx context.Context, arg CreateSpeciesPredictionParams) (SpeciesPrediction, error) {
	row := q.db.QueryRow(ctx, createSpeciesPrediction, arg.AssetID, arg.Label, arg.Score)
	var i SpeciesPrediction
	err := row.Scan(&i.AssetID, &i.Label, &i.Score)
	return i, err
}

const deleteSpeciesPredictionsByAsset = `-- name: DeleteSpeciesPredictionsByAsset :exec
DELETE FROM species_predictions WHERE asset_id = $1
`

func (q *Queries) DeleteSpeciesPredictionsByAsset(ctx context.Context, assetID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSpeciesPredictionsByAsset, assetID)
	return err
}

const getSpeciesPredictionsByAsset = `-- name: GetSpeciesPredictionsByAsset :many
SELECT asset_id, label, score FROM species_predictions
WHERE asset_id = $1
ORDER BY score DESC
`

func (q *Queries) GetSpeciesPredictionsByAsset(ctx context.Context, assetID pgtype.UUID) ([]SpeciesPrediction, error) {
	rows, err := q.db.Query(ctx, getSpeciesPredictionsByAsset, assetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SpeciesPrediction
	for rows.Next() {
		var i SpeciesPrediction
		if err := rows.Scan(&i.AssetID, &i.Label, &i.Score); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpeciesPredictionsByLabel = `-- name: GetSpeciesPredictionsByLabel :many
SELECT asset_id, label, score FROM species_predictions
WHERE label = $1
ORDER BY score DESC
LIMIT $2 OFFSET $3
`

type GetSpeciesPredictionsByLabelParams struct {
	Label  string `db:"label" json:"label"`
	Limit  int32  `db:"limit" json:"limit"`
	Offset int32  `db:"offset" json:"offset"`
}

func (q *Queries) GetSpeciesPredictionsByLabel(ctx context.Context, arg GetSpeciesPredictionsByLabelParams) ([]SpeciesPrediction, error) {
	rows, err := q.db.Query(ctx, getSpeciesPredictionsByLabel, arg.Label, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SpeciesPrediction
	for rows.Next() {
		var i SpeciesPrediction
		if err := rows.Scan(&i.AssetID, &i.Label, &i.Score); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopSpeciesForAsset = `-- name: GetTopSpeciesForAsset :many
SELECT asset_id, label, score FROM species_predictions
WHERE asset_id = $1 AND score >= $2
ORDER BY score DESC
LIMIT $3
`

type GetTopSpeciesForAssetParams struct {
	AssetID pgtype.UUID `db:"asset_id" json:"asset_id"`
	Score   float32     `db:"score" json:"score"`
	Limit   int32       `db:"limit" json:"limit"`
}

func (q *Queries) GetTopSpeciesForAsset(ctx context.Context, arg GetTopSpeciesForAssetParams) ([]SpeciesPrediction, error) {
	rows, err := q.db.Query(ctx, getTopSpeciesForAsset, arg.AssetID, arg.Score, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SpeciesPrediction
	for rows.Next() {
		var i SpeciesPrediction
		if err := rows.Scan(&i.AssetID, &i.Label, &i.Score); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
