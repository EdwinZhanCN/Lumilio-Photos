// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tags.sql

package repo

import (
	"context"
)

const createTag = `-- name: CreateTag :one
INSERT INTO tags (tag_name, category, is_ai_generated)
VALUES ($1, $2, $3)
RETURNING tag_id, tag_name, category, is_ai_generated
`

type CreateTagParams struct {
	TagName       string  `db:"tag_name" json:"tag_name"`
	Category      *string `db:"category" json:"category"`
	IsAiGenerated *bool   `db:"is_ai_generated" json:"is_ai_generated"`
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRow(ctx, createTag, arg.TagName, arg.Category, arg.IsAiGenerated)
	var i Tag
	err := row.Scan(
		&i.TagID,
		&i.TagName,
		&i.Category,
		&i.IsAiGenerated,
	)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags WHERE tag_id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, tagID int32) error {
	_, err := q.db.Exec(ctx, deleteTag, tagID)
	return err
}

const getTagByID = `-- name: GetTagByID :one
SELECT tag_id, tag_name, category, is_ai_generated FROM tags WHERE tag_id = $1
`

func (q *Queries) GetTagByID(ctx context.Context, tagID int32) (Tag, error) {
	row := q.db.QueryRow(ctx, getTagByID, tagID)
	var i Tag
	err := row.Scan(
		&i.TagID,
		&i.TagName,
		&i.Category,
		&i.IsAiGenerated,
	)
	return i, err
}

const getTagByName = `-- name: GetTagByName :one
SELECT tag_id, tag_name, category, is_ai_generated FROM tags WHERE tag_name = $1
`

func (q *Queries) GetTagByName(ctx context.Context, tagName string) (Tag, error) {
	row := q.db.QueryRow(ctx, getTagByName, tagName)
	var i Tag
	err := row.Scan(
		&i.TagID,
		&i.TagName,
		&i.Category,
		&i.IsAiGenerated,
	)
	return i, err
}

const getTagsByCategory = `-- name: GetTagsByCategory :many
SELECT tag_id, tag_name, category, is_ai_generated FROM tags
WHERE category = $1
ORDER BY tag_name ASC
`

func (q *Queries) GetTagsByCategory(ctx context.Context, category *string) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getTagsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.TagID,
			&i.TagName,
			&i.Category,
			&i.IsAiGenerated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT tag_id, tag_name, category, is_ai_generated FROM tags
ORDER BY tag_name ASC
LIMIT $1 OFFSET $2
`

type ListTagsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListTags(ctx context.Context, arg ListTagsParams) ([]Tag, error) {
	rows, err := q.db.Query(ctx, listTags, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.TagID,
			&i.TagName,
			&i.Category,
			&i.IsAiGenerated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :one
UPDATE tags
SET tag_name = $2, category = $3, is_ai_generated = $4
WHERE tag_id = $1
RETURNING tag_id, tag_name, category, is_ai_generated
`

type UpdateTagParams struct {
	TagID         int32   `db:"tag_id" json:"tag_id"`
	TagName       string  `db:"tag_name" json:"tag_name"`
	Category      *string `db:"category" json:"category"`
	IsAiGenerated *bool   `db:"is_ai_generated" json:"is_ai_generated"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.db.QueryRow(ctx, updateTag,
		arg.TagID,
		arg.TagName,
		arg.Category,
		arg.IsAiGenerated,
	)
	var i Tag
	err := row.Scan(
		&i.TagID,
		&i.TagName,
		&i.Category,
		&i.IsAiGenerated,
	)
	return i, err
}
