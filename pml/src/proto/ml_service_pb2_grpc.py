# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import ml_service_pb2 as ml__service__pb2


class PredictionServiceStub(object):
    """PredictionService: 通用机器学习预测服务接口
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessImageForCLIP = channel.unary_unary(
                '/prediction.PredictionService/ProcessImageForCLIP',
                request_serializer=ml__service__pb2.ImageProcessRequest.SerializeToString,
                response_deserializer=ml__service__pb2.ImageProcessResponse.FromString,
                )
        self.GetTextEmbeddingForCLIP = channel.unary_unary(
                '/prediction.PredictionService/GetTextEmbeddingForCLIP',
                request_serializer=ml__service__pb2.TextEmbeddingRequest.SerializeToString,
                response_deserializer=ml__service__pb2.TextEmbeddingResponse.FromString,
                )
        self.Predict = channel.unary_unary(
                '/prediction.PredictionService/Predict',
                request_serializer=ml__service__pb2.PredictRequest.SerializeToString,
                response_deserializer=ml__service__pb2.PredictResponse.FromString,
                )
        self.BatchPredict = channel.unary_unary(
                '/prediction.PredictionService/BatchPredict',
                request_serializer=ml__service__pb2.BatchPredictRequest.SerializeToString,
                response_deserializer=ml__service__pb2.BatchPredictResponse.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/prediction.PredictionService/HealthCheck',
                request_serializer=ml__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=ml__service__pb2.HealthCheckResponse.FromString,
                )


class PredictionServiceServicer(object):
    """PredictionService: 通用机器学习预测服务接口
    """

    def ProcessImageForCLIP(self, request, context):
        """ProcessImageForCLIP: 专为CLIP模型设计，处理图像并返回特征向量和可选标签
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTextEmbeddingForCLIP(self, request, context):
        """GetTextEmbeddingForCLIP: 专为CLIP模型设计，处理文本并返回特征向量
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Predict(self, request, context):
        """Predict: 通用预测接口，可用于未来其他模型的推理（如分类、回归等）
        注意：这里的PredictRequest/Response可能需要根据具体模型调整
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchPredict(self, request, context):
        """BatchPredict: 批量通用预测接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """HealthCheck: 模型状态检查，支持指定模型名称
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PredictionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessImageForCLIP': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessImageForCLIP,
                    request_deserializer=ml__service__pb2.ImageProcessRequest.FromString,
                    response_serializer=ml__service__pb2.ImageProcessResponse.SerializeToString,
            ),
            'GetTextEmbeddingForCLIP': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTextEmbeddingForCLIP,
                    request_deserializer=ml__service__pb2.TextEmbeddingRequest.FromString,
                    response_serializer=ml__service__pb2.TextEmbeddingResponse.SerializeToString,
            ),
            'Predict': grpc.unary_unary_rpc_method_handler(
                    servicer.Predict,
                    request_deserializer=ml__service__pb2.PredictRequest.FromString,
                    response_serializer=ml__service__pb2.PredictResponse.SerializeToString,
            ),
            'BatchPredict': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchPredict,
                    request_deserializer=ml__service__pb2.BatchPredictRequest.FromString,
                    response_serializer=ml__service__pb2.BatchPredictResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=ml__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=ml__service__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'prediction.PredictionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PredictionService(object):
    """PredictionService: 通用机器学习预测服务接口
    """

    @staticmethod
    def ProcessImageForCLIP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prediction.PredictionService/ProcessImageForCLIP',
            ml__service__pb2.ImageProcessRequest.SerializeToString,
            ml__service__pb2.ImageProcessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTextEmbeddingForCLIP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prediction.PredictionService/GetTextEmbeddingForCLIP',
            ml__service__pb2.TextEmbeddingRequest.SerializeToString,
            ml__service__pb2.TextEmbeddingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prediction.PredictionService/Predict',
            ml__service__pb2.PredictRequest.SerializeToString,
            ml__service__pb2.PredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchPredict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prediction.PredictionService/BatchPredict',
            ml__service__pb2.BatchPredictRequest.SerializeToString,
            ml__service__pb2.BatchPredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prediction.PredictionService/HealthCheck',
            ml__service__pb2.HealthCheckRequest.SerializeToString,
            ml__service__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
