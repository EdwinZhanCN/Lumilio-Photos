syntax = "proto3";

package prediction;

option go_package = "github.com/EdwinZhanCN/Lumilio-Photos/proto";

// PredictionService: 通用机器学习预测服务接口
service PredictionService {
    // ProcessImageForCLIP: 专为CLIP模型设计，处理图像并返回特征向量和可选标签
    rpc ProcessImageForCLIP (ImageProcessRequest) returns (ImageProcessResponse);

    // GetTextEmbeddingForCLIP: 专为CLIP模型设计，处理文本并返回特征向量
    rpc GetTextEmbeddingForCLIP (TextEmbeddingRequest) returns (TextEmbeddingResponse);

    // Predict: 通用预测接口，可用于未来其他模型的推理（如分类、回归等）
    // 注意：这里的PredictRequest/Response可能需要根据具体模型调整
    rpc Predict (PredictRequest) returns (PredictResponse) {}

    // BatchPredict: 批量通用预测接口
    rpc BatchPredict (BatchPredictRequest) returns (BatchPredictResponse) {}

    // HealthCheck: 模型状态检查，支持指定模型名称
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {}
}

// --- CLIP Specific Messages ---

// ImageProcessRequest: CLIP图像处理请求
message ImageProcessRequest {
    string image_id = 1;      // 图片的唯一ID，用于追踪
    bytes image_data = 2;     // 图片原始字节数据 (e.g., JPEG, PNG)
    repeated string target_labels = 3; // (Optional) 期望分类的标签列表，用于零样本分类
    string model_version = 4; // (Optional) 指定CLIP模型版本
}

// ImageProcessResponse: CLIP图像处理响应
message ImageProcessResponse {
    string image_id = 1;        // 对应的图片ID
    repeated float image_feature_vector = 2; // CLIP图像特征向量
    repeated string predicted_labels = 3; // (Optional) 预测的标签列表（如Imagenet标签），可能为空
    float similarity_score = 4; // (Optional) 与target_labels的最高相似度得分，或某个默认得分
    string model_version = 5;   // 使用的模型版本
    int64 processing_time_ms = 6; // 处理时间（毫秒）
}

// TextEmbeddingRequest: CLIP文本嵌入请求
message TextEmbeddingRequest {
    string text = 1;              // 输入的文本字符串
    string model_version = 2;     // (Optional) 指定CLIP模型版本
}

// TextEmbeddingResponse: CLIP文本嵌入响应
message TextEmbeddingResponse {
    repeated float text_feature_vector = 1; // CLIP文本特征向量
    string model_version = 2;       // 使用的模型版本
    int64 processing_time_ms = 3;   // 处理时间（毫秒）
}

// --- Generic Prediction Messages (Retained from your original for future use) ---

// PredictRequest: 单个通用预测请求
message PredictRequest {
    // 使用 Any 类型或 Oneof 来灵活处理不同模型的输入
    // 例如：
    // google.protobuf.Any input_data = 1; // 更灵活，但客户端需要知道如何打包/解包
    //
    // 或者使用 Oneof 针对常见类型：
    oneof input_data {
        bytes raw_data = 1;
        repeated float float_features = 2;
        string text_input = 3;
        // 更多特定类型可以在这里添加
    }
    string model_name = 4;        // 明确指定要调用的模型名称 (e.g., "resnet50_classifier")
    string model_version = 5;     // (Optional) 指定模型版本
}

// PredictResponse: 通用预测响应
message PredictResponse {
    // 同样，使用 Any 或 Oneof 来处理不同模型的输出
    oneof output_data {
        repeated float prediction_floats = 1;
        string prediction_text = 2;
        // 更多特定类型可以在这里添加
    }
    float confidence = 3;         // 置信度
    string model_name = 4;        // 返回使用的模型名称
    string model_version = 5;     // 返回使用的模型版本
    int64 prediction_time_ms = 6; // Unix时间戳（毫秒）或直接表示持续时间
}

// BatchPredictRequest: 批量通用预测请求
message BatchPredictRequest {
    repeated PredictRequest requests = 1;
    string model_name = 2; // 可选，批次内所有请求使用同一模型
}

// BatchPredictResponse: 批量通用预测响应
message BatchPredictResponse {
    repeated PredictResponse responses = 1;
    int32 success_count = 2;
    int32 failed_count = 3;
}

// HealthCheckRequest: 健康检查请求
message HealthCheckRequest {
    string service_name = 1; // 可以是 "all" 或具体的模型名称 (e.g., "CLIP_ImageProcessor", "FaceRecognizer")
}

// HealthCheckResponse: 健康检查响应
message HealthCheckResponse {
    enum ServingStatus {
        UNKNOWN = 0;
        SERVING = 1;
        NOT_SERVING = 2;
        SERVICE_SPECIFIC_ERROR = 3; // 区分是服务未知还是服务内部错误
    }
    ServingStatus status = 1;
    string model_name = 2;        // 返回检查的模型名称
    string model_version = 3;     // 返回模型版本
    int64 uptime_seconds = 4;     // 服务运行时间
    string message = 5;           // 可选，提供更详细的状态信息
}