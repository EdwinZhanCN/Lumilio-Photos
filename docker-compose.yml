version: "3.8"

services:
    db:
        image: postgres:15-alpine
        volumes:
            - postgres_data:/var/lib/postgresql/data
        environment:
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_USER=postgres
            - POSTGRES_DB=lumiliophotos
        networks:
            - backend
        # Remove public port exposure for security
        # ports:
        #     - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 5s
            retries: 5

    api:
        build:
            context: .
            dockerfile: server/Dockerfile.api
        depends_on:
            db:
                condition: service_healthy
        ports:
            - "8080:8080" # Keep exposed for external API access
        networks:
            - frontend
            - backend
        environment:
            - DB_HOST=db
            - DB_PORT=5432
            - DB_USER=postgres
            - DB_PASSWORD=postgres
            - DB_NAME=lumiliophotos
            - PORT=8080
            - STORAGE_PATH=/app/data/photos
            - STAGING_PATH=/app/staging
            - QUEUE_DIR=/app/queue
            - STORAGE_STRATEGY=date # 推荐用户友好的日期策略
            - STORAGE_PRESERVE_FILENAME=true # 保留原始文件名
            - STORAGE_DUPLICATE_HANDLING=rename # 重名文件添加(1)(2)后缀
        volumes:
            - photo_storage:/app/data/photos
            - staging_area:/app/staging
            - task_queue:/app/queue

    worker:
        build:
            context: .
            dockerfile: server/Dockerfile.worker
        depends_on:
            db:
                condition: service_healthy
            api:
                condition: service_started
        networks:
            - backend
            - ml-network
        environment:
            - DB_HOST=db
            - DB_PORT=5432
            - DB_USER=postgres
            - DB_PASSWORD=postgres
            - DB_NAME=lumiliophotos
            - STORAGE_PATH=/app/data/photos
            - STAGING_PATH=/app/staging
            - QUEUE_DIR=/app/queue
            - STORAGE_STRATEGY=date # 必须与API保持一致
            - STORAGE_PRESERVE_FILENAME=true
            - STORAGE_DUPLICATE_HANDLING=rename
        volumes:
            - photo_storage:/app/data/photos
            - staging_area:/app/staging
            - task_queue:/app/queue

    frontend:
        build:
            context: .
            dockerfile: web/Dockerfile
        ports:
            - "3000:80"
        networks:
            - frontend
        depends_on:
            api:
                condition: service_started
        environment:
            - API_URL=http://api:8080 # Internal container network access

    ml:
        build:
            context: .
            dockerfile: pml/Dockerfile
        networks:
            - ml-network
        environment:
            - MODEL_PATH=/app/models
        volumes:
            - ai_models:/app/models
        # Remove public port exposure for security
        # ports:
        #     - "8081:8081"

volumes:
    postgres_data:
    photo_storage:
    staging_area:
    task_queue:
    ai_models:

networks:
    frontend:
        driver: bridge
        internal: false # Allows external access for frontend
    backend:
        driver: bridge
        internal: true # Database and backend services only
    ml-network:
        driver: bridge
        internal: true # ML service isolated network
