/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/albums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List albums
         * @description Retrieve a paginated list of albums for the authenticated user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of results (max 100) */
                    limit?: number;
                    /** @description Number of results to skip for pagination */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Albums retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Invalid parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Failed to retrieve albums */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new album
         * @description Create a new album for the authenticated user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Album creation data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["handler.CreateAlbumRequest"];
                };
            };
            responses: {
                /** @description Album created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Invalid request data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Failed to create album */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/albums/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get album by ID
         * @description Retrieve a specific album by its ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Album ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Album retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Invalid album ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Album not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        /**
         * Update album
         * @description Update an existing album's information
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Album ID */
                    id: number;
                };
                cookie?: never;
            };
            /** @description Album update data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["handler.UpdateAlbumRequest"];
                };
            };
            responses: {
                /** @description Album updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Invalid album ID or request data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Album not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Failed to update album */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete album
         * @description Delete an album by its ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Album ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Album deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Invalid album ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Album not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Failed to delete album */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/albums/{id}/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get assets in album
         * @description Retrieve all assets in a specific album
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Album ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Assets retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Invalid album ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Album not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Failed to retrieve album assets */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/albums/{id}/assets/{assetId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add asset to album
         * @description Add an asset to a specific album
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Album ID */
                    id: number;
                    /** @description Asset ID (UUID format) */
                    assetId: string;
                };
                cookie?: never;
            };
            /** @description Asset position in album */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["handler.AddAssetToAlbumRequest"];
                };
            };
            responses: {
                /** @description Asset added to album successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Invalid album ID or asset ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Album not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Failed to add asset to album */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        /**
         * Remove asset from album
         * @description Remove an asset from a specific album
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Album ID */
                    id: number;
                    /** @description Asset ID (UUID format) */
                    assetId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Asset removed from album successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Invalid album ID or asset ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Failed to remove asset from album */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/albums/{id}/assets/{assetId}/position": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update asset position in album
         * @description Update the position of an asset within a specific album
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Album ID */
                    id: number;
                    /** @description Asset ID (UUID format) */
                    assetId: string;
                };
                cookie?: never;
            };
            /** @description New position for the asset */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["handler.UpdateAssetPositionRequest"];
                };
            };
            responses: {
                /** @description Asset position updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Invalid album ID or asset ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Failed to update asset position */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List assets
         * @description Retrieve a paginated list of assets. Filter by type(s) or owner. Assets are sorted by taken_time (photo capture time or video record time). At least one filter parameter is required.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Single asset type filter
                     * @example "PHOTO"
                     */
                    type?: "PHOTO" | "VIDEO" | "AUDIO" | "DOCUMENT";
                    /**
                     * @description Multiple asset types filter (comma-separated)
                     * @example "PHOTO,VIDEO"
                     */
                    types?: string;
                    /**
                     * @description Filter by owner ID
                     * @example 123
                     */
                    owner_id?: number;
                    /**
                     * @description Maximum number of results (max 100)
                     * @example 20
                     */
                    limit?: number;
                    /**
                     * @description Number of results to skip for pagination
                     * @example 0
                     */
                    offset?: number;
                    /**
                     * @description Sort order by taken_time
                     * @example "desc"
                     */
                    sort_order?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Assets retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Invalid parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Upload a single asset
         * @description Upload a single photo, video, audio file, or document to the system. The file is staged in a repository and queued for processing.
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Client-calculated BLAKE3 hash of the file */
                    "X-Content-Hash"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Repository UUID (optional, uses default if not provided) */
            requestBody?: {
                content: {
                    "multipart/form-data": string;
                };
            };
            responses: {
                /** @description Upload successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Bad request - no file provided or parse error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get asset by ID
         * @description Retrieve detailed information about a specific asset. Optionally include thumbnails, tags, albums, and species predictions.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Include thumbnails */
                    include_thumbnails?: boolean;
                    /** @description Include tags */
                    include_tags?: boolean;
                    /** @description Include albums */
                    include_albums?: boolean;
                    /** @description Include species predictions */
                    include_species?: boolean;
                };
                header?: never;
                path: {
                    /**
                     * @description Asset ID (UUID format)
                     * @example "550e8400-e29b-41d4-a716-446655440000"
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Asset details with optional relationships */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Invalid asset ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Asset not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        /**
         * Update asset metadata
         * @description Update the specific metadata of an asset (e.g., photo EXIF data, video metadata).
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Asset ID (UUID format)
                     * @example "550e8400-e29b-41d4-a716-446655440000"
                     */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Updated metadata */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["handler.UpdateAssetRequest"];
                };
            };
            responses: {
                /** @description Asset updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Invalid asset ID or request body */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete asset
         * @description Soft delete an asset by marking it as deleted. The physical file is not removed.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Asset ID (UUID format)
                     * @example "550e8400-e29b-41d4-a716-446655440000"
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Asset deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Invalid asset ID format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{id}/albums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get albums containing asset
         * @description Retrieve all albums that contain a specific asset
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Asset ID (UUID format) */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Albums retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Invalid asset ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Failed to retrieve asset albums */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{id}/albums/{albumId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add asset to album
         * @description Associate an asset with a specific album by asset ID and album ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Asset ID (UUID format)
                     * @example "550e8400-e29b-41d4-a716-446655440000"
                     */
                    id: string;
                    /**
                     * @description Album ID
                     * @example 123
                     */
                    albumId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Asset added to album successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Invalid asset ID or album ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{id}/audio/web": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get web-optimized audio
         * @description Serve the web-optimized MP3 audio version for an asset by asset ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Asset ID (UUID format)
                     * @example "550e8400-e29b-41d4-a716-446655440000"
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Web-optimized audio file */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                        "audio/mpeg": string;
                    };
                };
                /** @description Invalid asset ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Asset not found or not audio */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{id}/description": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update asset description
         * @description Update the description/comment of a specific asset
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Asset ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Description data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["handler.UpdateDescriptionRequest"];
                };
            };
            responses: {
                /** @description Description updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Asset not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{id}/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update asset like status
         * @description Update the like/favorite status of a specific asset
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Asset ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Like data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["handler.UpdateLikeRequest"];
                };
            };
            responses: {
                /** @description Like status updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Asset not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{id}/original": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get original file
         * @description Serve the original file content for an asset by asset ID. Returns the file as an octet-stream.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Asset ID (UUID format)
                     * @example "550e8400-e29b-41d4-a716-446655440000"
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Original file content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                        "application/octet-stream": string;
                    };
                };
                /** @description Invalid asset ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Asset not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{id}/rating": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update asset rating
         * @description Update the rating (0-5) of a specific asset
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Asset ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Rating data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["handler.UpdateRatingRequest"];
                };
            };
            responses: {
                /** @description Rating updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Asset not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{id}/rating-and-like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update asset rating and like status
         * @description Update both the rating (0-5) and like/favorite status of a specific asset
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Asset ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Rating and like data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["handler.UpdateRatingAndLikeRequest"];
                };
            };
            responses: {
                /** @description Rating and like status updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Asset not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{id}/thumbnail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get asset thumbnail
         * @description Retrieve a specific thumbnail image for an asset by asset ID and size parameter. Returns the image file directly.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Thumbnail size */
                    size?: "small" | "medium" | "large";
                };
                header?: never;
                path: {
                    /**
                     * @description Asset ID (UUID format)
                     * @example "550e8400-e29b-41d4-a716-446655440000"
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Thumbnail image file */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                        "image/jpeg": string;
                    };
                };
                /** @description Invalid asset ID or size parameter */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Asset or thumbnail not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/{id}/video/web": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get web-optimized video
         * @description Serve the web-optimized MP4 video version for an asset by asset ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Asset ID (UUID format)
                     * @example "550e8400-e29b-41d4-a716-446655440000"
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Web-optimized video file */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                        "video/mp4": string;
                    };
                };
                /** @description Invalid asset ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Asset not found or not a video */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Batch upload assets
         * @description Batch upload multiple assets to a repository. Each file part's field name should be its BLAKE3 content hash. All files are staged and queued for processing.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Repository UUID (optional, uses default if not provided) */
            requestBody?: {
                content: {
                    "multipart/form-data": string;
                };
            };
            responses: {
                /** @description Batch upload completed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Bad request - no files provided or parse error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Filter assets
         * @description Filter assets using comprehensive filtering options including repository selection, RAW, rating, liked status, filename patterns, date ranges, camera make, and lens
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Filter criteria */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["handler.FilterAssetsRequest"];
                };
            };
            responses: {
                /** @description Assets filtered successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Invalid request parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/filter-options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get filter options
         * @description Get available camera makes and lenses for filter dropdowns
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Filter options retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/liked": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get liked assets
         * @description Get all assets that have been liked/favorited
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of assets to return */
                    limit?: number;
                    /** @description Number of assets to skip */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Liked assets retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/rating/{rating}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get assets by rating
         * @description Get assets with a specific rating (0-5)
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of assets to return */
                    limit?: number;
                    /** @description Number of assets to skip */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Rating (0-5) */
                    rating: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Assets retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search assets
         * @description Search assets using either filename matching or semantic vector search. Can be combined with comprehensive filters including repository selection.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Search criteria */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["handler.SearchAssetsRequest"];
                };
            };
            responses: {
                /** @description Assets found successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Invalid request parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assets/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get supported asset types
         * @description Retrieve a list of all supported asset types in the system.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Asset types retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login user
         * @description Authenticate user with username and password
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Login credentials */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["service.LoginRequest"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Invalid request data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Invalid credentials */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout user
         * @description Revoke the user's refresh token
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Refresh token to revoke */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["service.RefreshTokenRequest"];
                };
            };
            responses: {
                /** @description Logout successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Invalid request data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Invalid refresh token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user
         * @description Get information about the currently authenticated user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description User information retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh access token
         * @description Generate a new access token using a valid refresh token
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Refresh token */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["service.RefreshTokenRequest"];
                };
            };
            responses: {
                /** @description Token refreshed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Invalid request data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Invalid or expired refresh token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Create a new user account with username, email, and password
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Registration data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["service.RegisterRequest"];
                };
            };
            responses: {
                /** @description User registered successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Business status code (0 for success, non-zero for errors)
                             * @example 0
                             */
                            code?: number;
                            /** @description Business data, ignore empty values */
                            data?: Record<string, never>;
                            /**
                             * @description Debug error message, ignore empty values
                             * @example error details
                             */
                            error?: string;
                            /**
                             * @description User readable message
                             * @example success
                             */
                            message?: string;
                        } & components["schemas"]["data"];
                    };
                };
                /** @description Invalid request data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description User already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.Result"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Standard API response wrapper */
        "api.Result": {
            /**
             * @description Business status code (0 for success, non-zero for errors)
             * @example 0
             */
            code?: number;
            /** @description Business data, ignore empty values */
            data?: Record<string, never>;
            /**
             * @description Debug error message, ignore empty values
             * @example error details
             */
            error?: string;
            /**
             * @description User readable message
             * @example success
             */
            message?: string;
        } & components["schemas"]["data"];
        data: {
            data?: components["schemas"]["service.UserResponse"];
        };
        "dbtypes.AssetType": string;
        "handler.AddAssetToAlbumRequest": {
            position?: number;
        };
        "handler.AssetDTO": {
            asset_id?: string;
            deleted_at?: string;
            duration?: number;
            file_size?: number;
            hash?: string;
            height?: number;
            is_deleted?: boolean;
            mime_type?: string;
            original_filename?: string;
            owner_id?: number;
            specific_metadata?: Record<string, never>;
            storage_path?: string;
            type?: string;
            upload_time?: string;
            width?: number;
        };
        "handler.AssetFilter": {
            /** @example Canon */
            camera_make?: string;
            date?: components["schemas"]["handler.DateRange"];
            filename?: components["schemas"]["handler.FilenameFilter"];
            /** @example EF 50mm f/1.8 */
            lens?: string;
            /** @example true */
            liked?: boolean;
            /** @example 123 */
            owner_id?: number;
            /** @example 5 */
            rating?: number;
            /** @example true */
            raw?: boolean;
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            repository_id?: string;
            /**
             * @example PHOTO
             * @enum {string}
             */
            type?: "PHOTO" | "VIDEO" | "AUDIO";
        };
        "handler.AssetListResponse": {
            assets?: components["schemas"]["handler.AssetDTO"][];
            /** @example 20 */
            limit?: number;
            /** @example 0 */
            offset?: number;
        };
        "handler.AssetTypesResponse": {
            types?: components["schemas"]["dbtypes.AssetType"][];
        };
        "handler.BatchUploadResponse": {
            results?: components["schemas"]["handler.BatchUploadResult"][];
        };
        "handler.BatchUploadResult": {
            /** @description MLService-provided content hash */
            content_hash?: string;
            /** @description Only present for failed uploads */
            error?: string;
            /** @description Original filename */
            file_name?: string;
            /** @description Status message */
            message?: string;
            /** @description Only present for successful uploads */
            size?: number;
            /** @description Only present for successful uploads */
            status?: string;
            /** @description Whether the file was successfully queued */
            success?: boolean;
            /** @description Only present for successful uploads */
            task_id?: number;
        };
        "handler.CreateAlbumRequest": {
            album_name: string;
            cover_asset_id: string;
            description?: string;
        };
        "handler.DateRange": {
            from?: string;
            to?: string;
        };
        "handler.FilenameFilter": {
            /**
             * @example startswith
             * @enum {string}
             */
            mode?: "contains" | "matches" | "startswith" | "endswith";
            /** @example IMG_ */
            value?: string;
        };
        "handler.FilterAssetsRequest": {
            filter?: components["schemas"]["handler.AssetFilter"];
            /** @example 20 */
            limit?: number;
            /** @example 0 */
            offset?: number;
        };
        "handler.GetAlbumResponse": {
            album_id?: number;
            album_name?: string;
            asset_count?: number;
            cover_asset_id?: string;
            created_at?: string;
            description?: string;
            updated_at?: string;
            user_id?: number;
        };
        "handler.ListAlbumsResponse": {
            albums?: components["schemas"]["handler.GetAlbumResponse"][];
            limit?: number;
            offset?: number;
            total?: number;
        };
        "handler.MessageResponse": {
            /** @example Operation completed successfully */
            message?: string;
        };
        "handler.OptionsResponse": {
            camera_makes?: string[];
            lenses?: string[];
        };
        "handler.SearchAssetsRequest": {
            filter?: components["schemas"]["handler.AssetFilter"];
            /** @example 20 */
            limit?: number;
            /** @example 0 */
            offset?: number;
            /** @example red bird on branch */
            query: string;
            /**
             * @example filename
             * @enum {string}
             */
            search_type: "filename" | "semantic";
        };
        "handler.UpdateAlbumRequest": {
            album_name?: string;
            cover_asset_id?: string;
            description?: string;
        };
        "handler.UpdateAssetPositionRequest": {
            position: number;
        };
        "handler.UpdateAssetRequest": {
            specific_metadata?: Record<string, never>;
        };
        "handler.UpdateDescriptionRequest": {
            /** @example A beautiful sunset photo */
            description?: string;
        };
        "handler.UpdateLikeRequest": {
            /** @example true */
            liked?: boolean;
        };
        "handler.UpdateRatingAndLikeRequest": {
            /** @example true */
            liked?: boolean;
            /** @example 5 */
            rating?: number;
        };
        "handler.UpdateRatingRequest": {
            /** @example 5 */
            rating?: number;
        };
        "handler.UploadResponse": {
            /** @example abcd1234567890 */
            content_hash?: string;
            /** @example photo.jpg */
            file_name?: string;
            /** @example File received and queued for processing */
            message?: string;
            /** @example 1048576 */
            size?: number;
            /** @example processing */
            status?: string;
            /** @example 12345 */
            task_id?: number;
        };
        "service.AuthResponse": {
            expiresAt?: string;
            refreshToken?: string;
            token?: string;
            user?: components["schemas"]["service.UserResponse"];
        };
        "service.LoginRequest": {
            password: string;
            username: string;
        };
        "service.RefreshTokenRequest": {
            refreshToken: string;
        };
        "service.RegisterRequest": {
            email: string;
            password: string;
            username: string;
        };
        "service.UserResponse": {
            created_at?: string;
            email?: string;
            is_active?: boolean;
            last_login?: string;
            user_id?: number;
            username?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
